#!/usr/bin/env zsh
# Plugins
fpath=($HOME/.asdf/completions $fpath)
plugins=(
    asdf
    colored-man-pages
    docker
    docker-compose
    dotnet
    # emacs
    fzf
    git
    git-flow-avh
    gpg-agent
    helm
    history-substring-search
    keychain
    kubectl
    mix
    nix-zsh-completions
    oc
    osx-zsh-completions
    pipenv
    ripgrep
    rust
    tmux
    zsh-completions
)


# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
export TERM=xterm-256color

# https://github.com/sbugzu/gruvbox-zsh
ZSH_THEME="gruvbox"
SOLARIZED_THEME="dark"
CASE_SENSITIVE="true"

# From emacs-libvterm
# https://github.com/akermu/emacs-libvterm#shell-side-configuration
vterm_printf(){
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

#
# Powerlevel9k settings
#
DEFAULT_USER=$USER
POWERLEVEL9K_MODE='awesome-fontconfig'
POWERLEVEL9K_SHORTEN_DIR_LENGTH=2
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(virtualenv context dir vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status time)
POWERLEVEL9K_SHOW_CHANGESET=true
POWERLEVEL9K_CHANGESET_HASH_LENGTH=6
POWERLEVEL9K_VIRTUALENV_BACKGROUND='white'

# AWS settings
AWS_DEFAULT_PROFILE="default"

# Keychain configuration
# zstyle :omz:plugins:keychain agents gpg,ssh
# zstyle :omz:plugins:keychain identities id_rsa id_rsa_intility
# zstyle :omz:plugins:keychain options --quiet --gpg2

zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes

# Load oh-my-zsh
source $ZSH/oh-my-zsh.sh
autoload -U compinit && compinit

# Load some bash completions (for stuff that don't have zsh completions)
[ -f /usr/local/etc/bash_completion.d/az ] && source /usr/local/etc/bash_completion.d/az
autoload -U +X bashcompinit && bashcompinit

#
# User configuration
#

# Increase file descriptor limits
ulimit -n 10240

# History
[ -z "$HISTFILE" ] && HISTFILE="$HOME/.zsh_history"
HIST_STAMPS="dd.mm.yyyy"
HISTSIZE=1000
SAVEHIST=10000

## History command configuration
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
setopt share_history          # share command history data

#
# Key bindings
# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Standard-Widgets
# See http://stackoverflow.com/a/29403520/1326249 for iTerm2 bindings
#
bindkey "^X\\x7f" backward-kill-line
bindkey "^X\\x0b" kill-line
bindkey "^K"  kill-whole-line
bindkey "^[b" backward-word
bindkey "^[f" forward-word
bindkey "^[d" delete-word
bindkey "^[[1;10D" beginning-of-line
bindkey "^[[1;10C" end-of-line
bindkey '^R' history-incremental-search-backward
bindkey '^F' history-incremental-search-forward

unsetopt RM_STAR_WAIT  # If you do a 'rm *', Zsh will give you a sanity check!

unsetopt autopushd  # Normal pushd/popd behaviour
unsetopt CORRECT    # Disable Zsh spelling corrector

# source fzf if existing
test -e /usr/local/var/homebrew/linked/fzf/shell/key-bindings.zsh && source /usr/local/var/homebrew/linked/fzf/shell/key-bindings.zsh || true

# source iterm2 shell integration if existing
test -e /Users/aa646/.iterm2_shell_integration.zsh && source /Users/aa646/.iterm2_shell_integration.zsh || true

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

